{
  "_args": [
    [
      {
        "raw": "brfs@^2.0.0",
        "scope": null,
        "escapedName": "brfs",
        "name": "brfs",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "/Applications/MAMP/htdocs/klik2learn/GITHUB/J2E-Application/J2E-Meteor/templates/node_modules/fontkit"
    ]
  ],
  "_from": "brfs@^2.0.0",
  "_hasShrinkwrap": false,
  "_id": "brfs@2.0.2",
  "_location": "/brfs",
  "_nodeVersion": "11.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/brfs_2.0.2_1550591863041_0.6877795347725741"
  },
  "_npmUser": {
    "name": "goto-bus-stop",
    "email": "renee@kooi.me"
  },
  "_npmVersion": "6.8.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "brfs@^2.0.0",
    "scope": null,
    "escapedName": "brfs",
    "name": "brfs",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/fontkit",
    "/linebreak"
  ],
  "_resolved": "https://registry.npmjs.org/brfs/-/brfs-2.0.2.tgz",
  "_shasum": "44237878fa82aa479ce4f5fe2c1796ec69f07845",
  "_shrinkwrap": null,
  "_spec": "brfs@^2.0.0",
  "_where": "/Applications/MAMP/htdocs/klik2learn/GITHUB/J2E-Application/J2E-Meteor/templates/node_modules/fontkit",
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "bin": {
    "brfs": "bin/cmd.js"
  },
  "bugs": {
    "url": "https://github.com/substack/brfs/issues"
  },
  "dependencies": {
    "quote-stream": "^1.0.1",
    "resolve": "^1.1.5",
    "static-module": "^3.0.2",
    "through2": "^2.0.0"
  },
  "description": "browserify fs.readFileSync() static asset inliner",
  "devDependencies": {
    "browserify": "^16.1.1",
    "concat-stream": "^1.6.0",
    "tap": "^10.7.3",
    "through": "^2.3.4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-IrFjVtwu4eTJZyu8w/V2gxU7iLTtcHih67sgEdzrhjLBMHp2uYefUBfdM4k2UvcuWMgV7PQDZHSLeNWnLFKWVQ==",
    "shasum": "44237878fa82aa479ce4f5fe2c1796ec69f07845",
    "tarball": "https://registry.npmjs.org/brfs/-/brfs-2.0.2.tgz",
    "fileCount": 63,
    "unpackedSize": 30380,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcbCd3CRA9TVsSAnZWagAAMHkP/1MAM42XzP8XVdLC0IHk\nVoCxpj9ltJFXI6xiYDnRixNU7/Ti8mw/+KtnBRr5GJcXVXDLWaXWVOIUZsZi\nO/H7FGWDGgF4Z+ZCHO+INVQuVeUzrpzCwabXvvTVc8kWR7N+GCYY0l9ccFLs\nyMfp/rU+X9HTlmRd4Zv070ZjL4GA2ZuzoIrTXPpjfKZuwpUd8L3IrUrBAa7M\n6hYv0sp/Vt3nOU/XkChsadCjBU5B21e1Esb0+m2BxZodG1UENnhhsCb35dg3\nisS8i1cXxhDOhusz8mOF43LwZIj5CDAoITZ1afklQAwg78sbTg6yT8pjx4Ae\nrv4XyNLhw8K+2BaK75SFpZiPP+X4OPNmcAV2rnAHX4ocHLjq+7/nQSbd3k6C\nyk6K3d9VKNAZQz9vmbdAZN2eycqHxjQMS98DUFAsWYF0aikbpOAEp8zyhl6F\n4W94sQYynqDhG1vYDwgQZw0v7pn4AGb2cWmif5dsIgKxM8DOxLH4oLcPXJF3\nJgEddrgXJ7CIdlIl7hpCPwdAflAiU/C0hqOwuKrUYa1xrrQzYCF3zsYOe+63\nrqeVqIDB0gTuQ09+wmbEn2yLdL69x4xyTx96IZWTDMq7NIyg1HsWvVsUyJvN\nv3Mj6yvIQUrUiaAht6BT+/HBP3iDk55Q8VUZVYlXZvCRSBUNPr+3cHp3PGf3\nWYKk\r\n=DGzD\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "660f6d81cb22eba997503ce17150db2c4aa3f94d",
  "homepage": "https://github.com/substack/brfs",
  "keywords": [
    "browserify",
    "browserify-transform",
    "fs",
    "readFileSync",
    "plugin",
    "static",
    "asset",
    "bundle",
    "base64"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "ahdinosaur",
      "email": "michael.williams@enspiral.com"
    },
    {
      "name": "anandthakker",
      "email": "vestibule@anandthakker.net"
    },
    {
      "name": "ashaffer88",
      "email": "darawk@gmail.com"
    },
    {
      "name": "balupton",
      "email": "b@lupton.cc"
    },
    {
      "name": "bpostlethwaite",
      "email": "post.ben.here@gmail.com"
    },
    {
      "name": "bret",
      "email": "bcomnes@gmail.com"
    },
    {
      "name": "cwmma",
      "email": "calvin.metcalf@gmail.com"
    },
    {
      "name": "dominictarr",
      "email": "dominic.tarr@gmail.com"
    },
    {
      "name": "elnounch",
      "email": "contact@elnounch.net"
    },
    {
      "name": "emilbayes",
      "email": "github@tixz.dk"
    },
    {
      "name": "feross",
      "email": "feross@feross.org"
    },
    {
      "name": "forbeslindesay",
      "email": "forbes@lindesay.co.uk"
    },
    {
      "name": "fpereira1",
      "email": "pereira.filype@gmail.com"
    },
    {
      "name": "garann",
      "email": "garann@gmail.com"
    },
    {
      "name": "gkatsev",
      "email": "me@gkatsev.com"
    },
    {
      "name": "goto-bus-stop",
      "email": "renee@kooi.me"
    },
    {
      "name": "hughsk",
      "email": "hughskennedy@gmail.com"
    },
    {
      "name": "indutny",
      "email": "fedor@indutny.com"
    },
    {
      "name": "jmm",
      "email": "npm-public@jessemccarthy.net"
    },
    {
      "name": "jprichardson",
      "email": "jprichardson@gmail.com"
    },
    {
      "name": "jryans",
      "email": "jryans@gmail.com"
    },
    {
      "name": "leichtgewicht",
      "email": "martin.heidegger@gmail.com"
    },
    {
      "name": "mafintosh",
      "email": "mathiasbuus@gmail.com"
    },
    {
      "name": "mattdesl",
      "email": "dave.des@gmail.com"
    },
    {
      "name": "maxogden",
      "email": "max@maxogden.com"
    },
    {
      "name": "mellowmelon",
      "email": "palmermebane@gmail.com"
    },
    {
      "name": "parshap",
      "email": "parshap+npm@gmail.com"
    },
    {
      "name": "pkrumins",
      "email": "peteris.krumins@gmail.com"
    },
    {
      "name": "sethvincent",
      "email": "sethvincent@gmail.com"
    },
    {
      "name": "stevemao",
      "email": "maochenyan@gmail.com"
    },
    {
      "name": "substack",
      "email": "substack@gmail.com"
    },
    {
      "name": "tehshrike",
      "email": "me@JoshDuff.com"
    },
    {
      "name": "terinjokes",
      "email": "terinjokes@gmail.com"
    },
    {
      "name": "thlorenz",
      "email": "thlorenz@gmx.de"
    },
    {
      "name": "ungoldman",
      "email": "ungoldman@gmail.com"
    },
    {
      "name": "yerkopalma",
      "email": "yerko.palma@usach.cl"
    },
    {
      "name": "yoshuawuyts",
      "email": "yoshuawuyts@gmail.com"
    },
    {
      "name": "zertosh",
      "email": "zertosh@gmail.com"
    }
  ],
  "name": "brfs",
  "optionalDependencies": {},
  "readme": "# brfs\n\nfs.readFileSync() and fs.readFile() static asset browserify transform\n\n[![build status](https://secure.travis-ci.org/browserify/brfs.png)](http://travis-ci.org/browserify/brfs)\n\nThis module is a plugin for [browserify](http://browserify.org) to parse the AST\nfor `fs.readFileSync()` calls so that you can inline file contents into your\nbundles.\n\nEven though this module is intended for use with browserify, nothing about it is\nparticularly specific to browserify so it should be generally useful in other\nprojects.\n\n# example\n\nfor a main.js:\n\n``` js\nvar fs = require('fs');\nvar html = fs.readFileSync(__dirname + '/robot.html', 'utf8');\nconsole.log(html);\n```\n\nand a robot.html:\n\n``` html\n<b>beep boop</b>\n```\n\nfirst `npm install brfs` into your project, then:\n\n## on the command-line\n\n```\n$ browserify -t brfs example/main.js > bundle.js\n```\n\nnow in the bundle output file,\n\n``` js\nvar html = fs.readFileSync(__dirname + '/robot.html', 'utf8');\n```\n\nturns into:\n\n``` js\nvar html = \"<b>beep boop</b>\\n\";\n```\n\n## or with the api\n\n``` js\nvar browserify = require('browserify');\nvar fs = require('fs');\n\nvar b = browserify('example/main.js');\nb.transform('brfs');\n\nb.bundle().pipe(fs.createWriteStream('bundle.js'));\n```\n\n## async\n\nYou can also use `fs.readFile()`:\n\n``` js\nvar fs = require('fs');\nfs.readFile(__dirname + '/robot.html', 'utf8', function (err, html) {\n    console.log(html);\n});\n```\n\nWhen you run this code through brfs, it turns into:\n\n``` js\nvar fs = require('fs');\nprocess.nextTick(function () {(function (err, html) {\n    console.log(html);\n})(null,\"<b>beep boop</b>\\n\")});\n```\n\n# methods\n\nbrfs looks for:\n\n* `fs.readFileSync(pathExpr, enc=null)`\n* `fs.readFile(pathExpr, enc=null, cb)`\n* `fs.readdirSync(pathExpr)`\n* `fs.readdir(pathExpr, cb)`\n\nInside of each `pathExpr`, you can use\n[statically analyzable](http://npmjs.org/package/static-eval) expressions and\nthese variables and functions:\n\n* `__dirname`\n* `__filename`\n* `path` if you `var path = require('path')` first\n* `require.resolve()`\n\nJust like node, the default encoding is `null` and will give back a `Buffer`.\nIf you want differently-encoded file contents for your inline content you can\nset `enc` to `'utf8'`, `'base64'`, or `'hex'`.\n\nIn async mode when a callback `cb` is given, the contents of `pathExpr` are\ninlined into the source inside of a `process.nextTick()` call.\n\nWhen you use a `'file'`-event aware watcher such as\n[watchify](https://npmjs.org/package/watchify), the inlined assets will be\nupdated automatically.\n\nIf you want to use this plugin directly, not through browserify, the api\nfollows.\n\n``` js\nvar brfs = require('brfs')\n```\n\n## var tr = brfs(file, opts)\n\nReturn a through stream `tr` inlining `fs.readFileSync()` file contents\nin-place.\n\nOptionally, you can set which `opts.vars` will be used in the\n[static argument evaluation](https://npmjs.org/package/static-eval)\nin addition to `__dirname` and `__filename`.\n\n`opts.parserOpts` can be used to configure the parser brfs uses,\n[acorn](https://github.com/acornjs/acorn#main-parser).\n\n# events\n\n## tr.on('file', function (file) {})\n\nFor every file included with `fs.readFileSync()` or `fs.readFile()`, the `tr`\ninstance emits a `'file'` event with the `file` path.\n\n# usage\n\nA tiny command-line program ships with this module to make debugging easier.\n\n```\nusage:\n\n  brfs file\n \n    Inline `fs.readFileSync()` calls from `file`, printing the transformed file\n    contents to stdout.\n\n  brfs\n  brfs -\n \n    Inline `fs.readFileSync()` calls from stdin, printing the transformed file\n    contents to stdout.\n\n```\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install brfs\n```\n\nthen use `-t brfs` with the browserify command or use `.transform('brfs')` from\nthe browserify api.\n\n# gotchas\n\nSince `brfs` evaluates your source code *statically*, you can't use dynamic expressions that need to be evaluated at run time. For example:\n\n```js\n// WILL NOT WORK!\nvar file = window.someFilePath;\nvar str = require('fs').readFileSync(file, 'utf8');\n```\n\nInstead, you must use simpler expressions that can be resolved at build-time:\n\n```js\nvar str = require('fs').readFileSync(__dirname + '/file.txt', 'utf8');\n```\n\nAnother gotcha: `brfs` does not yet support ES module `import` statements. See [brfs-babel](https://github.com/Jam3/brfs-babel) for an experimental replacement that supports this syntax.\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/brfs.git"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "version": "2.0.2"
}
