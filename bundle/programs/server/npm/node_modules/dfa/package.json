{
  "_args": [
    [
      {
        "raw": "dfa@^1.2.0",
        "scope": null,
        "escapedName": "dfa",
        "name": "dfa",
        "rawSpec": "^1.2.0",
        "spec": ">=1.2.0 <2.0.0",
        "type": "range"
      },
      "/Applications/MAMP/htdocs/klik2learn/GITHUB/J2E-Application/J2E-Meteor/templates/node_modules/fontkit"
    ]
  ],
  "_from": "dfa@^1.2.0",
  "_hasShrinkwrap": false,
  "_id": "dfa@1.2.0",
  "_location": "/dfa",
  "_nodeVersion": "12.0.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/dfa_1.2.0_1560736198275_0.15129651032467462"
  },
  "_npmUser": {
    "name": "devongovett",
    "email": "devongovett@gmail.com"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "dfa@^1.2.0",
    "scope": null,
    "escapedName": "dfa",
    "name": "dfa",
    "rawSpec": "^1.2.0",
    "spec": ">=1.2.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/fontkit"
  ],
  "_resolved": "https://registry.npmjs.org/dfa/-/dfa-1.2.0.tgz",
  "_shasum": "96ac3204e2d29c49ea5b57af8d92c2ae12790657",
  "_shrinkwrap": null,
  "_spec": "dfa@^1.2.0",
  "_where": "/Applications/MAMP/htdocs/klik2learn/GITHUB/J2E-Application/J2E-Meteor/templates/node_modules/fontkit",
  "author": {
    "name": "Devon Govett",
    "email": "devongovett@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/devongovett/dfa/issues"
  },
  "dependencies": {},
  "description": "A state machine compiler",
  "devDependencies": {
    "@babel/core": "^7.0.0",
    "@babel/preset-env": "^7.0.0",
    "@babel/register": "^7.0.0",
    "mocha": "^3.1.0",
    "pegjs": "^0.10.0",
    "rollup": "^1.5.0",
    "rollup-plugin-babel": "^4.0.1",
    "rollup-plugin-commonjs": "^9.2.1",
    "rollup-plugin-local-resolve": "^1.0.7"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-ED3jP8saaweFTjeGX8HQPjeC1YYyZs98jGNZx6IiBvxW7JG5v492kamAQB3m2wop07CvU/RQmzcKr6bgcC5D/Q==",
    "shasum": "96ac3204e2d29c49ea5b57af8d92c2ae12790657",
    "tarball": "https://registry.npmjs.org/dfa/-/dfa-1.2.0.tgz",
    "fileCount": 6,
    "unpackedSize": 137726,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdBvHHCRA9TVsSAnZWagAA3TsP+gJxBBaJpBEkzPko4v2r\nCymaJHmr1xAUePGaaSotnXgjzR4H6SRlob1vxk8gRwccs68XiU71wChXqixG\n2DCQ/cKtOxJmjL1GHbDdpwui2pvQKv2gmeL3O4XZBeKybHQGyUzAlAQuP6Oz\nCZEb2CLBBz81Cea7NIS9JaOgK1mbjd3P462htFLoaCr0AAS+3OXAhDJKEcXD\nnLZ4wgxrWhpV0MNLU4sCcA6gH4KAP5LKOiPnJbRxZmmroXIVqpCzf6KIUYFU\nlttYMLfhICDbMRq09d2Yoi4ARtXQgKMVnsICcR6p0LXPzZiwSnGywntv/uwl\nQttGwjtobjIv4rmFHfk3mF+DgJEHPu1CaaA762hnnLoea18lw68rTvLqdR+U\n3gQrommxFfn8ABpxwjRRf3Bqp7xuVB5W3yNJn/lvVQ1GbwFtEF0CWRkT4SKA\ne74et90vCqTCUcTGLxU6CYL72YE1glnpkErEqnE1f172bYyoOgNxCa+khUAU\nF3xXkmunRNx9GECOTsQrCo8sykvVgr+hVjDmu368Ykd9pCvV41JPmdMdQAlr\n0uJ5Ja0unlBCuQmxUy+J+CtSp/drl9K9IvydX+hq33jJ6TL1t4smLsWnKT47\nXJnd4y+fiF1rKew3czTvfWCbFRCDDHIvmjIqyzHEbZhV87o69dsBw+5ZN4mR\nKNKQ\r\n=ktlT\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "index.js",
    "index.js.map",
    "compile.js",
    "compile.js.map"
  ],
  "gitHead": "3f5e603e5082caedabefefdf53e8a6ca3111e966",
  "homepage": "https://github.com/devongovett/dfa#readme",
  "keywords": [
    "state",
    "machine",
    "compiler"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "devongovett",
      "email": "devongovett@gmail.com"
    }
  ],
  "name": "dfa",
  "optionalDependencies": {},
  "readme": "# dfa\n\nCompiles a regular expression like syntax to fast deterministic finite automata.\nUseful for pattern matching against non-string sequences.\n\n## Example\n\nThis example matches [Hangul](https://en.wikipedia.org/wiki/Hangul) syllables. The symbols defined in the machine are Unicode character categories which could be mapped from code points.\n\nMachine definition:\n\n```coffeescript\n# define symbols\nX   = 0; # Other character\nL   = 1; # Leading consonant\nV   = 2; # Medial vowel\nT   = 3; # Trailing consonant\nLV  = 4; # Composed <LV> syllable\nLVT = 5; # Composed <LVT> syllable\nM   = 6; # Tone mark\n\n# define variables\ndecomposed = L V T?;\npartial = LV T?;\ncomposed = LVT;\n\n# define main state machine pattern\nmain = (decomposed | partial | composed) M?;\n```\n\nVisualized, the machine looks like this (double circles are accepting states):\n\n![dfa](https://cloud.githubusercontent.com/assets/19409/19143719/8fbc6a12-8b5a-11e6-868d-99621644d094.png)\n\nCompiling and using the machine:\n\n```javascript\nimport compile from 'dfa/compile';\nimport fs from 'fs';\n\nlet stateMachine = compile(fs.readFileSync('hangul.machine', 'utf8'));\n\n// find matches\nfor (let [startIndex, endIndex] of stateMachine.match([0, 1, 2, 3, 0, 4, 6]) {\n  console.log('match:', startIndex, endIndex);\n}\n```\n\nOutput:\n```\nmatch: 1 3\nmatch: 5 6\n```\n\n## Syntax\n\nA state machine file contains a list of assignment statements. Comments are also allowed\nand are started with the `#` character. Each statement is an assignment of a variable name\nto a value or expression. Assigning a variable to a number produces a symbol, which is\nadded to the state machine's alphabet. Assigning a variable to an expression allows\nfor substitutions into later expressions. The special `main` variable should always be\nassigned to at the end of the file, and is the final expression that will be compiled.\n\nA subset of common regular expression syntax is supported. A list of operators and their\nprecedence is below. Operators with the same precedence are evaluated left to right.\n\n| Precedence | Syntax     | Type          | Meaning                                    |\n| ---------- | ---------- | --------------| ------------------------------------------ |\n| 1          | `a \\| b`   | Alternation   | Matches either `a` or `b`                  |\n| 2          | `a b`      | Concatenation | Matches `a` followed by `b`                |\n| 3          | `a*`       | Repetition    | Matches zero or more occurrences of `a`    |\n| 3          | `a+`       | Repetition    | Matches one ore more occurrences of `a`    |\n| 3          | `a?`       | Optional      | Matches zero or one occurrence of `a`      |\n| 3          | `a{n}`     | Repetition    | Matches exactly n occurrences of `a`       |\n| 3          | `a{n,}`    | Repetition    | Matches n or more occurrences of `a`       |\n| 3          | `a{,n}`    | Repetition    | Matches up to n occurrences of `a`         |\n| 3          | `a{n,m}`   | Repetition    | Matches n to m occurrences of `a`          |\n| 4          | `t:<expr>` | Tag           | Tags the following expression with tag `t` |\n| 5          | `(<expr>)` | Grouping      | Groups an expression                       |\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/devongovett/dfa.git"
  },
  "scripts": {
    "prepublish": "make",
    "test": "mocha --require @babel/register"
  },
  "version": "1.2.0"
}
