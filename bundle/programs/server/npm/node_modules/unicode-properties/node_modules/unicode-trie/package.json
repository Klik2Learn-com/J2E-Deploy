{
  "_args": [
    [
      {
        "raw": "unicode-trie@^2.0.0",
        "scope": null,
        "escapedName": "unicode-trie",
        "name": "unicode-trie",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "/Applications/MAMP/htdocs/klik2learn/GITHUB/J2E-Application/J2E-Meteor/templates/node_modules/unicode-properties"
    ]
  ],
  "_from": "unicode-trie@^2.0.0",
  "_hasShrinkwrap": false,
  "_id": "unicode-trie@2.0.0",
  "_location": "/unicode-properties/unicode-trie",
  "_nodeVersion": "12.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/unicode-trie_2.0.0_1574032445335_0.19689724171467815"
  },
  "_npmUser": {
    "name": "devongovett",
    "email": "devongovett@gmail.com"
  },
  "_npmVersion": "6.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "unicode-trie@^2.0.0",
    "scope": null,
    "escapedName": "unicode-trie",
    "name": "unicode-trie",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/unicode-properties"
  ],
  "_resolved": "https://registry.npmjs.org/unicode-trie/-/unicode-trie-2.0.0.tgz",
  "_shasum": "8fd8845696e2e14a8b67d78fa9e0dd2cad62fec8",
  "_shrinkwrap": null,
  "_spec": "unicode-trie@^2.0.0",
  "_where": "/Applications/MAMP/htdocs/klik2learn/GITHUB/J2E-Application/J2E-Meteor/templates/node_modules/unicode-properties",
  "author": {
    "name": "Devon Govett",
    "email": "devongovett@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/devongovett/unicode-trie/issues"
  },
  "dependencies": {
    "pako": "^0.2.5",
    "tiny-inflate": "^1.0.0"
  },
  "description": "Unicode Trie data structure for fast character metadata lookup, ported from ICU",
  "devDependencies": {
    "mocha": "^6.1.4",
    "nyc": "^14.1.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-x7bc76x0bm4prf1VLg79uhAzKw8DVboClSN5VxJuQ+LKDOVEW9CdH+VY7SP+vX7xCYQqzzgQpFqz15zeLvAtZQ==",
    "shasum": "8fd8845696e2e14a8b67d78fa9e0dd2cad62fec8",
    "tarball": "https://registry.npmjs.org/unicode-trie/-/unicode-trie-2.0.0.tgz",
    "fileCount": 8,
    "unpackedSize": 48887,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd0dQ9CRA9TVsSAnZWagAA7I0P/i+ba+NSzZCXU3gR4bO+\n8r/nKHFVtdNu0O2Dvadw4/aZpFbOqk96PBNY7ZPKCE5zxLwQV2pC/uabfWjC\nZ5Ye9wJ0JOyPNylkDClZ5PyskS2n23QPcvDG+DG90kTzchlxMVs4UtviiYNd\n9589G7B1A4Bcc8sujB5X5vey00fZ5f8gOYP8iG9OKhCrf0C9jHBnqWG1pKU0\nabYVUSFSj3BU8MMOnfwRXlMTtuZoS+hCU3qnzABSVyPNo+6c+LIsA8lfbyLu\n1joXtzZHaCSmi8wnas/vbuKSUCUwdKculLI6vyB2PP84PGUIeR8Zbk+mWnYC\n1SyDKQy1aCSaiojaE2Fb4AY7pwQrUzJpZt7oUCZi9piRlTSRIF0RB0/DyM4F\nsf/wiZPJGWdO7JdAO76QxMKy/YjWLF0ql1ApWfUcpM7fSUQccvMMCakUEYqp\nv8u0azlkW6Kfe4DWBlUDG0MJpiAnbYd9iE9/Tw1GhZ35aGYQDT+rv49fBWKR\nj0hqB0RTAwoVCmnUgIZedyY1caVcgOMf3qDXYQn4/QuWmiPfNiiefzwKOwNw\nv/J7dyRD3dBPfrVxdFe0q2abZ4JyInVRK42R3MUmIcHDxhe4nPEHNovBWdE8\nonhcxSKGXd6mcPHDAuUtNji2nmkmFI257c1gkKY/uM4UyNJSaDVX3UCBlyPW\ni5ZZ\r\n=5RNF\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "916656f45abab135face2b53ee5e32488cc9b47f",
  "homepage": "https://github.com/devongovett/unicode-trie",
  "license": "MIT",
  "maintainers": [
    {
      "name": "devongovett",
      "email": "devongovett@gmail.com"
    }
  ],
  "name": "unicode-trie",
  "optionalDependencies": {},
  "readme": "# unicode-trie\nA data structure for fast Unicode character metadata lookup, ported from ICU\n\n## Background\n\nWhen implementing many Unicode algorithms such as text segmentation,\nnormalization, bidi processing, etc., fast access to character metadata\nis crucial to good performance.  There over a million code points in the\nUnicode standard, many of which produce the same result when looked up,\nso an array or hash table is not appropriate - those data structures are\nfast but would require a lot of memory.  The data is generally\ngrouped in ranges, so you could do a binary search, but that is not\nfast enough for some applications.\n\nThe [International Components for Unicode](http://site.icu-project.org) (ICU) project\ncame up with a data structure based on a [Trie](http://en.wikipedia.org/wiki/Trie) that provides fast access\nto Unicode metadata.  The range data is precompiled to a serialized\nand flattened trie, which is then used at runtime to lookup the necessary\ndata.  According to my own tests, this is generally at least 50% faster\nthan binary search, with not too much additional memory required.\n\n## Installation\n\n    npm install unicode-trie\n\n## Building a Trie\n\nUnicode Tries are generally precompiled from data in the Unicode database\nfor faster runtime performance.  To build a Unicode Trie, use the\n`UnicodeTrieBuilder` class.\n\n```js\nconst UnicodeTrieBuilder = require('unicode-trie/builder');\nconst fs = require('fs');\n\n// create a trie\nlet t = new UnicodeTrieBuilder();\n\n// optional parameters for default value, and error value\n// if not provided, both are set to 0\nt = new UnicodeTrieBuilder(10, 999);\n\n// set individual values and ranges\nt.set(0x4567, 99);\nt.setRange(0x40, 0xe7, 0x1234);\n\n// you can lookup a value if you like\nt.get(0x4567); // => 99\n\n// get a compiled trie (returns a UnicodeTrie object)\nconst trie = t.freeze();\n\n// write compressed trie to a binary file\nfs.writeFileSync('data.trie', t.toBuffer());\n```\n\n## Using a precompiled Trie\n\nOnce you've built a precompiled trie, you can load it into the\n`UnicodeTrie` class, which is a readonly representation of the\ntrie.  From there, you can lookup values.\n\n```js\nconst UnicodeTrie = require('unicode-trie');\nconst fs = require('fs');\n\n// load serialized trie from binary file\nconst data = fs.readFileSync('data.trie');\nconst trie = new UnicodeTrie(data);\n\n// lookup a value\ntrie.get(0x4567); // => 99\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/devongovett/unicode-trie.git"
  },
  "scripts": {
    "coverage": "nyc mocha",
    "test": "mocha"
  },
  "version": "2.0.0"
}
